// Export utilities for generating PDF and Excel files
import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';

// Generate PDF content for vendor data
export const generateVendorPDF = (vendor) => {
  const doc = new jsPDF();
  
  // Set font and size
  doc.setFont('helvetica');
  doc.setFontSize(16);
  
  // Title
  doc.text('Vendor Profile Report', 20, 20);
  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
  
  // Company Information Section
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('COMPANY INFORMATION', 20, 45);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  let yPosition = 55;
  const lineHeight = 7;
  
  doc.text(`Vendor Code: ${vendor.vendor_code || vendor.vendorCode}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Company Name: ${vendor.company_name || vendor.companyName}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Contact Person: ${vendor.contact_person || vendor.contactPerson}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Email: ${vendor.email}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Phone: ${vendor.phone}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Website: ${vendor.website}`, 20, yPosition);
  
  // Address Section
  yPosition += lineHeight + 5;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('ADDRESS', 20, yPosition);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition += lineHeight;
  doc.text(vendor.address, 20, yPosition);
  
  // Business Details Section
  yPosition += lineHeight + 5;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('BUSINESS DETAILS', 20, yPosition);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition += lineHeight;
  doc.text(`Category: ${vendor.category}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Vendor Type: ${vendor.vendor_type || vendor.vendorType}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Country: ${vendor.country}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Status: ${vendor.status}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`MSME Status: ${vendor.msme_status || vendor.msmeStatus}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Registration Date: ${vendor.registration_date || vendor.registrationDate}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Approval Stage: ${vendor.approval_stage || vendor.approvalStage}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Annual Turnover: ${vendor.annual_turnover || vendor.annualTurnover}`, 20, yPosition);
  
  // Tax & Compliance Section
  yPosition += lineHeight + 5;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('TAX & COMPLIANCE', 20, yPosition);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition += lineHeight;
  doc.text(`GST Number: ${vendor.gst_number || vendor.gstNumber || 'N/A'}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`PAN Number: ${vendor.pan_number || vendor.panNumber || 'N/A'}`, 20, yPosition);
  
  // Banking Information Section
  yPosition += lineHeight + 5;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('BANKING INFORMATION', 20, yPosition);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition += lineHeight;
  doc.text(`Bank Name: ${vendor.bank_name || vendor.bankName}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Account Number: ${vendor.account_number || vendor.accountNumber}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`IFSC Code: ${vendor.ifsc_code || vendor.ifscCode}`, 20, yPosition);
  yPosition += lineHeight;
  doc.text(`Currency: ${vendor.currency}`, 20, yPosition);
  
  // Documents Section
  yPosition += lineHeight + 5;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('DOCUMENTS', 20, yPosition);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition += lineHeight;
  doc.text((vendor.documents || []).join(', '), 20, yPosition);
  
  // Footer
  yPosition += lineHeight + 10;
  doc.setFontSize(8);
  doc.text('Report generated by VendorHub Management System', 20, yPosition);
  
  return doc;
};

// Generate Excel data for vendor
export const generateVendorExcelData = (vendor) => {
  return [
    {
      'Vendor Code': vendor.vendor_code || vendor.vendorCode,
      'Company Name': vendor.company_name || vendor.companyName,
      'Contact Person': vendor.contact_person || vendor.contactPerson,
      'Email': vendor.email,
      'Phone': vendor.phone,
      'Website': vendor.website,
      'Address': vendor.address,
      'Category': vendor.category,
      'Vendor Type': vendor.vendor_type || vendor.vendorType,
      'Country': vendor.country,
      'Status': vendor.status,
      'MSME Status': vendor.msme_status || vendor.msmeStatus,
      'Registration Date': vendor.registration_date || vendor.registrationDate,
      'Approval Stage': vendor.approval_stage || vendor.approvalStage,
      'Annual Turnover': vendor.annual_turnover || vendor.annualTurnover,
      'GST Number': vendor.gst_number || vendor.gstNumber || 'N/A',
      'PAN Number': vendor.pan_number || vendor.panNumber || 'N/A',
      'Bank Name': vendor.bank_name || vendor.bankName,
      'Account Number': vendor.account_number || vendor.accountNumber,
      'IFSC Code': vendor.ifsc_code || vendor.ifscCode,
      'Currency': vendor.currency,
      'Documents': (vendor.documents || []).join(', ')
    }
  ];
};

// Generate Excel data for multiple vendors
export const generateVendorsExcelData = (vendors) => {
  return vendors.map(vendor => ({
    'Vendor Code': vendor.vendor_code || vendor.vendorCode,
    'Company Name': vendor.company_name || vendor.companyName,
    'Contact Person': vendor.contact_person || vendor.contactPerson,
    'Email': vendor.email,
    'Phone': vendor.phone,
    'Website': vendor.website,
    'Address': vendor.address,
    'Category': vendor.category,
    'Vendor Type': vendor.vendor_type || vendor.vendorType,
    'Country': vendor.country,
    'Status': vendor.status,
    'MSME Status': vendor.msme_status || vendor.msmeStatus,
    'Registration Date': vendor.registration_date || vendor.registrationDate,
    'Approval Stage': vendor.approval_stage || vendor.approvalStage,
    'Annual Turnover': vendor.annual_turnover || vendor.annualTurnover,
    'GST Number': vendor.gst_number || vendor.gstNumber || 'N/A',
    'PAN Number': vendor.pan_number || vendor.panNumber || 'N/A',
    'Bank Name': vendor.bank_name || vendor.bankName,
    'Account Number': vendor.account_number || vendor.accountNumber,
    'IFSC Code': vendor.ifsc_code || vendor.ifscCode,
    'Currency': vendor.currency,
    'Documents': (vendor.documents || []).join(', ')
  }));
};

// Download text as file
export const downloadTextAsFile = (content, filename, mimeType) => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

// Download JSON as file
export const downloadJSONAsFile = (data, filename) => {
  const content = JSON.stringify(data, null, 2);
  downloadTextAsFile(content, filename, 'application/json');
};

// Download CSV as file
export const downloadCSVAsFile = (data, filename) => {
  if (data.length === 0) return;

  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        const value = row[header] || '';
        // Escape commas and quotes in CSV
        return `"${String(value).replace(/"/g, '""')}"`;
      }).join(',')
    )
  ].join('\n');

  downloadTextAsFile(csvContent, filename, 'text/csv');
};

// Export vendor as PDF
export const exportVendorAsPDF = (vendor) => {
  const doc = generateVendorPDF(vendor);
  const filename = `vendor_${vendor.vendor_code || vendor.vendorCode}_${new Date().toISOString().split('T')[0]}.pdf`;
  
  // Save the PDF
  doc.save(filename);
};

// Export vendor as Excel
export const exportVendorAsExcel = (vendor) => {
  const data = generateVendorExcelData(vendor);
  const filename = `vendor_${vendor.vendor_code || vendor.vendorCode}_${new Date().toISOString().split('T')[0]}.xlsx`;
  
  // Create workbook and worksheet
  const workbook = XLSX.utils.book_new();
  const worksheet = XLSX.utils.json_to_sheet(data);
  
  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Vendor Data');
  
  // Save the Excel file
  XLSX.writeFile(workbook, filename);
};

// Export multiple vendors as Excel
export const exportVendorsAsExcel = (vendors) => {
  const data = generateVendorsExcelData(vendors);
  const filename = `vendors_export_${new Date().toISOString().split('T')[0]}.xlsx`;
  
  // Create workbook and worksheet
  const workbook = XLSX.utils.book_new();
  const worksheet = XLSX.utils.json_to_sheet(data);
  
  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Vendors Data');
  
  // Save the Excel file
  XLSX.writeFile(workbook, filename);
};

// Export vendor data in specified format
export const exportVendorData = (vendor, format = 'pdf') => {
  switch (format.toLowerCase()) {
    case 'pdf':
      exportVendorAsPDF(vendor);
      break;
    case 'excel':
      exportVendorAsExcel(vendor);
      break;
    default:
      console.error('Unsupported export format:', format);
  }
};

// Export multiple vendors in specified format
export const exportVendorsData = (vendors, format = 'excel') => {
  switch (format.toLowerCase()) {
    case 'excel':
      exportVendorsAsExcel(vendors);
      break;
    default:
      console.error('Unsupported export format:', format);
  }
}; 