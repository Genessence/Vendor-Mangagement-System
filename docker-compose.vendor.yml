version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: vendor_postgres
    environment:
      POSTGRES_DB: vendor_management_db
      POSTGRES_USER: vendor_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vendor_user -d vendor_management_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vendor_network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vendor_backend
    environment:
      - DATABASE_URL=postgresql://vendor_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/vendor_management_db
      - SECRET_KEY=${SECRET_KEY:-your-super-secure-secret-key-change-this}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-["vendor.ambercompliancesystem.com"]}
      - CORS_ORIGINS=${CORS_ORIGINS:-["https://ambercompliancesystem.com", "https://www.ambercompliancesystem.com", "https://vendor.ambercompliancesystem.com"]}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - UPLOAD_DIR=uploads
      - MAX_FILE_SIZE=10485760
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - vendor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: vendor_nginx
    ports:
      - "8080:80"  # Using port 8080 to avoid conflicts with existing MSME service
      - "8443:443" # Using port 8443 for HTTPS
    volumes:
      - ./nginx/vendor-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - vendor_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local
  frontend_build:
    driver: local

networks:
  vendor_network:
    driver: bridge 